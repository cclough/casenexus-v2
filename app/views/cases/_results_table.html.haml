- @view = "show" if params[:view].blank?

%table.cases_resultstable_table{class: ("show" if @view == "show")}
  %thead


    %th.cases_resultstable_table_column_criteria
      Criteria
      / = params[:view]

    %th
      Score
      / - if @view != "show"
      /   %p (Last #{@period.to_s} Av. /5)
    %th.cases_resultstable_table_column_bar

    / %th
    /   Previous
    /   %p (Prev #{@period.to_s} Av. /5)
    - if @view != "show"
      %th
        Growth
        / %p (From previous #{@period.to_s} to last #{@period.to_s})
      %th
        / Site Av.
        / %p (All cases by all users)
      / %th
      /   Recommendation
    

  %tbody
    - @table_hash.each_with_index do |(key, value), index|

      %tr
        %td.cases_resultstable_table_cell_criteria
          / Name
          = Case.criteria_name(key)



        %td.cases_resultstable_cell_score
          / Last 5 Average
          = value

        %td
          / Chart
          .cases_resultstable_chart_bar{"data-score" => value, id: "cases_"+@view+"_resultstable_chart_bar_"+index.to_s, "data-category" => Case.criteria_category(key)}

        - if @view != "show"
          / Growth cell
          - if current_user.cases.count > 2
            - prev_av = Case.criteria_av_user(current_user, 5, 5, key)
            - curr_av = value
            - growth = ((curr_av/prev_av)-1)*100
            = colorcoded_cell(growth, "#{number_to_percentage(growth, precision: 0)} (#{prev_av})")
          - else
            %td
              N/A

          / Diff from average cell
          / - site_av = Case.criteria_av_global(key)
          / - diff = value - site_av
          / = colorcoded_cell(diff, site_av)
          
          / / Recommednation cell
          / = recommendation_cell(growth, diff)



  / %th
  /   Bottom Q Av
  / %th
  /   Top Q Av

  /     %td
  /       / average of top quartile
  /       - array = Case.all.map { |a| a.criteria(key) }
  /       - percentile = 0.75
  /       - topquart = array.sort[(array.length * percentile)..(array.length)]
  /       = (topquart.inject(0.0) { |sum, el| sum + el } / topquart.size).round(1)
  /     %td
  /       - array = Case.all.map { |a| a.criteria(key) }
  /       - percentile = 0.25
  /       - bottomquart = array.sort[0..(array.length * percentile)]
  /       = (bottomquart.inject(0.0) { |sum, el| sum + el } / bottomquart.size).round(1)
